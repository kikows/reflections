What happens when you initialize a repository? Why do you need to do it?

	It creates a hidden folder ".git" which will store the versions of the commits of my project. With it I can do my version-control and all the commands from git.
	
How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	The staging area is sort of a temporary directory where you store the files you want to apply to your commit. It is helpful as it helps you organize what you
	will save in your commit. 	
	
How can you use the staging area to make sure you have one commit per logical
change?

	You can check what you have added to the staging area using the "git status" command to see what files were added to the staging area. You can then compare
	them with your latest commit to see exactly what was changed and then decide wether you want to add more or less things to the staging area before commiting.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	When you add a new feature or an experimental code in your project that you don't know if it will be good or you would like to keep two different features
	of a project separatedly. By using branches you can work on different versions without having to commit changes with the same branch so you could work on
	different modes of your game or different features without having to save them all in one file.

How do the diagrams help you visualize the branch structure?

	With diagrams we can see different branches we created and where are they in the branch log history.
	
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	

What are the pros and cons of Git’s automatic merging vs. always doing merges


<<<<<<< HEAD
LINHA ADICIONADA MASTER
||||||| merged common ancestors
	
=======
	
LINHA ADICIONADA TESTE03
>>>>>>> teste03
